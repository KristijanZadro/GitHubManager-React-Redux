{"version":3,"sources":["Gif/loading-arrow.gif","components/Header.js","components/Search.js","redux/actions/userActions.js","redux/actions/types.js","components/UsersList.js","components/Error.js","components/Loading.js","App.js","serviceWorker.js","redux/reducers/userReducer.js","index.js"],"names":["module","exports","Header","className","Search","onChange","e","setState","searchValue","target","value","onSubmit","state","preventDefault","props","handleGetRequest","this","type","placeholder","autoComplete","name","Component","connect","dispatch","userName","axios","method","url","then","res","users","data","addUser","catch","err","console","log","removeUser","id","user","usersRender","map","index","key","public_repos","onClick","length","Error","Loading","src","LoadingGif","alt","App","useSelector","error","loading","Boolean","window","location","hostname","match","initialState","userReducer","action","filter","GitHubUser","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b4adc276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading-arrow.e9ea7394.gif\";","import React from 'react'\r\nimport '../App.css'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>GitHub Manager</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../App.css'\r\nimport {connect} from 'react-redux'\r\nimport {handleGetRequest} from '../redux/actions/userActions'\r\n\r\nclass Search extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            searchValue: ''\r\n        }\r\n    }\r\n    onChange = e => {\r\n        this.setState({\r\n            searchValue: e.target.value\r\n        })\r\n    }\r\n    onSubmit = e => {\r\n        const {searchValue} = this.state\r\n        e.preventDefault()\r\n        //const searchTerm = e.target.elements.searchValue.value     second way of sending value of input to handleGetRequest function\r\n        this.props.handleGetRequest(searchValue)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"search\">\r\n            <form onSubmit={this.onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter username:\"\r\n                    autoComplete=\"off\"\r\n                    name=\"searchValue\"\r\n                    value={this.state.searchValue}\r\n                    onChange={this.onChange}\r\n                />\r\n                <button>ADD</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        handleGetRequest: userName => dispatch(handleGetRequest(userName))\r\n    }\r\n  }\r\n\r\n  export default connect(null,mapDispatchToProps)(Search);","import axios from 'axios'\r\nimport {\r\n    USER_ADDED,\r\n    REMOVE_USER,\r\n    USER_NOT_FOUND,\r\n    LOADING_USER\r\n} from './types'\r\n\r\nexport const addUser = users => ({\r\n    type: USER_ADDED,\r\n    users\r\n})\r\n\r\nexport const removeUser = user => ({\r\n    type: REMOVE_USER,\r\n    user\r\n})\r\n\r\nexport const userError = () => ({\r\n    type: USER_NOT_FOUND\r\n})\r\n\r\nexport const loading = () => ({\r\n    type: LOADING_USER\r\n})\r\n\r\nexport const handleGetRequest = userName => {\r\n    return dispatch => {\r\n        dispatch(loading())\r\n        axios({\r\n            method: 'get',\r\n            url: `https://api.github.com/users/${userName}`\r\n          })\r\n          .then(res => {\r\n            const users = res.data\r\n            dispatch(addUser(users))\r\n        })\r\n          .catch(err => {\r\n              console.log(err)\r\n              dispatch(userError())\r\n          });\r\n\r\n    }\r\n}","export const USER_ADDED = 'USER_ADDED'\r\nexport const REMOVE_USER = 'REMOVE_USER'\r\nexport const USER_NOT_FOUND = 'USER_NOT_FOUND'\r\nexport const LOADING_USER = 'LOADING_USER'\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {removeUser} from '../redux/actions/userActions'\r\nimport '../App.css'\r\nimport {MdDelete} from 'react-icons/md'\r\n\r\nfunction UsersList({users,removeUser}) {\r\n    const usersRender = users.map((user,index)=> {\r\n        return (\r\n            <tbody key={index}>\r\n                <tr>\r\n                    <td>{user.id}</td>\r\n                    <td>{user.name}</td>\r\n                    <td>{user.public_repos}</td>\r\n                    <td className=\"delete\" onClick={()=> removeUser(user)}><MdDelete /></td>\r\n\r\n                </tr>\r\n            </tbody>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                usersRender.length > 0 ?\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Repos</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead> \r\n                    \r\n                    {usersRender}\r\n\r\n                </table> :\r\n                ''\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        removeUser: id => dispatch(removeUser(id))\r\n    }\r\n}\r\n\r\n export default connect(null, mapDispatchToProps)(UsersList)","import React from 'react'\r\nimport '../App.css'\r\n\r\nexport default function Error() {\r\n    return (\r\n        <div className=\"error\">\r\n            <p>User not found</p> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport LoadingGif from '../Gif/loading-arrow.gif'\r\nimport '../App.css'\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div className=\"loading\">\r\n            <img src={LoadingGif} alt=\"loading...\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport UsersList from './components/UsersList';\nimport Error from './components/Error'\nimport { useSelector } from 'react-redux';\nimport Loading from './components/Loading';\n\n\nfunction App() {\n  const users = useSelector(state => state.users)\n  const error = useSelector(state => state.error)\n  const loading = useSelector(state => state.loading)\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search />\n      { error ? <Error /> : ''}\n      {\n        loading ?\n        <Loading /> :\n        <UsersList users={users} /> \n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    USER_ADDED,\r\n    REMOVE_USER,\r\n    USER_NOT_FOUND,\r\n    LOADING_USER\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n    users: [],\r\n    error: false,\r\n    loading: false\r\n}\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case USER_ADDED:\r\n            return {\r\n                ...state,\r\n                error: false,\r\n                loading: false,\r\n                users: [...state.users,action.users]\r\n            }\r\n        case REMOVE_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(GitHubUser => GitHubUser.id !== action.user.id )\r\n            }\r\n        case USER_NOT_FOUND:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                loading: false\r\n            }\r\n        case LOADING_USER:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default userReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport userReducer from './redux/reducers/userReducer'\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  userReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}